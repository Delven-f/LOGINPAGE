<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DelvineX - Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
    .animated-border {
        position: relative;
        z-index: 0;
    }
    .animated-border::before {
        content: "";
        position: absolute;
        inset: -4px;
        z-index: -1;
        border-radius: 1rem;
        background: linear-gradient(270deg, #87b8cc, #00b8ff, #4caf50, #87b8cc);
        background-size: 600% 600%;
        animation: borderMove 5s linear infinite;
    }
    @keyframes borderMove {
        0% {background-position: 0% 50%;}
        100% {background-position: 100% 50%;}
    }
    .led-animated-border {
        position: relative;
        z-index: 0;
    }
    .led-animated-border::before {
        content: "";
        position: absolute;
        inset: -7px;
        z-index: -2;
        border-radius: 1.2rem;
        padding: 0;
        background: repeating-linear-gradient(
            90deg,
            #00ffe7 0px,
            #00ffe7 8px,
            #161d27 8px,
            #161d27 16px
        );
        background-size: 32px 32px;
        animation: ledBorderMove 1s linear infinite;
        width: calc(100% + 14px);
        height: calc(100% + 14px);
        pointer-events: none;
        box-sizing: border-box;
        display: block;
    }
    @keyframes ledBorderMove {
        from { background-position: 0 0; }
        to   { background-position: 32px 0; }
    }
    .animated-border.led-animated-border::before {
        z-index: -2;
    }
    .animated-border::before {
        z-index: -1;
    }
    </style>
</head>
<body class="flex flex-col items-center justify-center h-screen bg-[transparant]">
    <div class="fixed inset-0 flex items-center justify-center">
        <div class="relative bg-[#2b4d6d] border-4 border-[rgb(135,184,204)] shadow-lg p-8 w-[390px] rounded-2xl animated-border led-animated-border">
            <p class="text-white text-center font-bold text-3xl">GTPS SERVER</p>
            <!-- Animasi Orang Memegang Panah dan Membidik Target -->
            <div class="flex justify-center my-4">
              <svg width="200" height="120" viewBox="0 0 200 120" fill="none" xmlns="http://www.w3.org/2000/svg">
                <!-- Target -->
                <circle cx="170" cy="60" r="20" fill="#fff" stroke="#b71c1c" stroke-width="4"/>
                <circle cx="170" cy="60" r="12" fill="#fff" stroke="#1976d2" stroke-width="3"/>
                <circle cx="170" cy="60" r="5" fill="#b71c1c"/>
                <!-- Archer Body -->
                <ellipse cx="55" cy="90" rx="18" ry="25" fill="#90caf9"/>
                <!-- Head -->
                <circle cx="55" cy="55" r="13" fill="#ffe0b2"/>
                <!-- Arm holding bow -->
                <rect x="69" y="72" width="38" height="6" rx="3" fill="#ffe0b2" transform="rotate(-10 69 72)"/>
                <!-- Bow -->
                <path d="M110 75 Q120 60 110 45" stroke="#8d6e63" stroke-width="4" fill="none"/>
                <!-- Arrow (animated) -->
                <g>
                  <animateTransform attributeName="transform" type="translate" from="0 0" to="55 0" begin="0s" dur="1.2s" repeatCount="indefinite"/>
                  <rect x="100" y="73" width="34" height="2" rx="1" fill="#616161"/>
                  <polygon points="134,74 140,74 137,70 137,78" fill="#b71c1c"/>
                </g>
                <!-- String -->
                <line x1="110" y1="45" x2="110" y2="75" stroke="#fff" stroke-width="2"/>
              </svg>
            </div>
            <!-- Error Message -->
            <div id="errorDiv" class="hidden bg-red-500 text-white p-3 my-4 rounded text-center">
                <span id="errorMessage"></span>
            </div>
            <!-- Login Form -->
            <form 
                method="post"
                action="/player/growid/login/validate"
                accept-charset="UTF-8"
                id="loginForm" class="mt-6 bg-transparent">
                <div class="mb-2">
                    <label for="loginGrowId" class="block text-white text-lg">GrowID</label>
                    <div class="flex items-center border-2 border-[rgb(129,212,250)] rounded bg-transparent px-2 py-2">
                        <i class="fas fa-user text-white mr-2 text-lg"></i>
                        <input type="text" name="growId" id="loginGrowId" 
                               class="w-full bg-transparent text-white text-lg placeholder-white focus:outline-none" 
                               placeholder="Enter your growid">
                    </div>
                </div>
                <div class="mb-2">
                    <label for="loginPassword" class="block text-white text-lg">Password</label>
                    <div class="flex items-center border-2 border-[rgb(129,212,250)] rounded bg-transparent px-2 py-2">
                        <i class="fas fa-lock text-white mr-2 text-lg"></i>
                        <input type="password" name="password" id="loginPassword" 
                               class="w-full bg-transparent text-white text-lg placeholder-white focus:outline-none" 
                               placeholder="Enter your password">
                        <button type="button" id="toggleLogPassword" class="text-white ml-3 focus:outline-none text-lg">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                <div class="flex justify-between items-center mt-6">
                    <button id="loginButton" 
                            class="px-4 py-2 rounded bg-[#00b8ff] text-white text-lg hover:bg-[#06a4dd] transition duration-300 ease-in-out transform hover:scale-105">
                        Login
                    </button>
                    <a href="/register">
                        <button type="button" id="registerButton" 
                                class="px-4 py-2 rounded bg-[#4caf50] text-white text-lg hover:bg-[#43a047] transition duration-300 ease-in-out transform hover:scale-105">
                            Register
                        </button>
                    </a>
                </div>
            </form>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Auto-fill GrowID from localStorage
            if (localStorage.getItem('growId')) {
                document.getElementById('loginGrowId').value = localStorage.getItem('growId');
            }

            // Debugging log for auto-filled values
            console.log('GrowID auto-filled:', document.getElementById('loginGrowId').value);
        });

        // Event listener for login button
        document.getElementById('loginButton').addEventListener('click', function (event) {
            event.preventDefault();

            const loginForm = document.getElementById('loginForm');
            const uName = document.getElementById('loginGrowId').value;
            const uPass = document.getElementById('loginPassword').value;

            // Debugging log for input values
            console.log('GrowID:', uName, 'Password:', uPass);

            if (!uName || !uPass) {
                document.getElementById('errorDiv').classList.remove('hidden');
                document.getElementById('errorMessage').innerHTML = 'Username or Password is empty';
                return;
            } else if (uName.length < 4 || uPass.length < 4) {
                document.getElementById('errorDiv').classList.remove('hidden');
                document.getElementById('errorMessage').innerHTML = 'Username or Password must be at least 4 characters long';
                return;
            } else {
                loginForm.submit();
                localStorage.setItem('growId', uName); // Save GrowID to localStorage
            }
        });

        // Toggle visibility of the password field
        document.getElementById('toggleLogPassword').addEventListener('click', function () {
            const LpasswordField = document.getElementById('loginPassword');
            const LpasswordFieldType = LpasswordField.getAttribute('type');
            if (LpasswordFieldType === 'password') {
                LpasswordField.setAttribute('type', 'text');
                this.innerHTML = '<i class="fas fa-eye-slash"></i>';
            } else {
                LpasswordField.setAttribute('type', 'password');
                this.innerHTML = '<i class="fas fa-eye"></i>';
            }
        });
    </script>
</body>
</html>
